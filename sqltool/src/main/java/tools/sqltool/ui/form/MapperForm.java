/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.sqltool.ui.form;

import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import javax.sql.DataSource;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import tools.sqltool.cfg.AppConfig;
import tools.sqltool.mapper.ColumnMapper;
import tools.sqltool.mapper.MapperStore;
import tools.sqltool.mapper.TableMapper;
import tools.sqltool.ui.model.ColumnMapperTableModel;
import tools.sqltool.utils.AppUtils;
import tools.sqltool.utils.DataMetaUtils;

/**
 *
 * @author yy
 */
public class MapperForm extends javax.swing.JInternalFrame {

    private ColumnMapperTableModel tableModel;
    private TableMapper mapper;
    private DataSource destDs;
    private DataMetaUtils destDataMetaUtils;
    private DataSource srcDs;
    private DataMetaUtils srcDataMetaUtils;
    private JComboBox srcComboBox;
    private List<ColumnMapper> srcColumnMappers;
    private MapperStore mapperStore;

    /**
     * Creates new form MapperForm
     */
    public MapperForm() {
        init();
        initComponents();
        initAfter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSrcSql = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mapperTable = new javax.swing.JTable();
        btnFillTable = new javax.swing.JButton();
        btnSaveMapper = new javax.swing.JButton();
        btnGenSql = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtDestDbLink = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAttachedSql = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        chkIsGenerateDeleteSql = new javax.swing.JCheckBox();
        chkIsGenerateCommitSql = new javax.swing.JCheckBox();
        cmbDestTableName = new javax.swing.JComboBox();
        cmbSrcTableName = new javax.swing.JComboBox();
        btnGenAllSql = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Mapper");

        jLabel1.setText("Dest Table");

        jLabel2.setText("Src Table");

        txtSrcSql.setColumns(20);
        txtSrcSql.setRows(5);
        jScrollPane1.setViewportView(txtSrcSql);

        jLabel3.setText("Src Sql");

        mapperTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(mapperTable);

        btnFillTable.setText("Fill Mapper");
        btnFillTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillTableActionPerformed(evt);
            }
        });

        btnSaveMapper.setText("Save Mapper");
        btnSaveMapper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMapperActionPerformed(evt);
            }
        });

        btnGenSql.setText("Gen Sql");
        btnGenSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenSqlActionPerformed(evt);
            }
        });

        jLabel4.setText("Dest DBLink");

        txtDestDbLink.setText("mfbms_dblink");

        txtAttachedSql.setColumns(20);
        txtAttachedSql.setRows(5);
        jScrollPane3.setViewportView(txtAttachedSql);

        jLabel5.setText("Attatched Sql");

        chkIsGenerateDeleteSql.setText("Is Generate Delete Sql?");

        chkIsGenerateCommitSql.setText("Is Generate Commit Sql?");

        cmbDestTableName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDestTableNameItemStateChanged(evt);
            }
        });

        btnGenAllSql.setText("Gen All Sql");
        btnGenAllSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenAllSqlActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(jLabel4)
                                        .add(18, 18, 18))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel1)
                                        .add(24, 24, 24)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(cmbDestTableName, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(txtDestDbLink, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(34, 34, 34)
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .add(layout.createSequentialGroup()
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(jLabel3)
                                        .add(28, 28, 28)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(chkIsGenerateCommitSql)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                    .add(cmbSrcTableName, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(layout.createSequentialGroup()
                                        .add(chkIsGenerateDeleteSql)
                                        .add(517, 517, 517))
                                    .add(layout.createSequentialGroup()
                                        .add(jScrollPane3)
                                        .add(377, 377, 377)))))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnSaveMapper, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnFillTable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnGenSql, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnGenAllSql, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(25, 25, 25)
                                .add(jLabel3))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel1)
                                    .add(cmbDestTableName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel4)
                                    .add(txtDestDbLink, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnFillTable)
                            .add(cmbSrcTableName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(btnSaveMapper)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnGenSql)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnGenAllSql)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 28, Short.MAX_VALUE))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))))
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chkIsGenerateDeleteSql)
                    .add(chkIsGenerateCommitSql))
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 381, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFillTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillTableActionPerformed
        fillMapperTable();
    }//GEN-LAST:event_btnFillTableActionPerformed

    private void btnSaveMapperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMapperActionPerformed
        saveMapepr();
    }//GEN-LAST:event_btnSaveMapperActionPerformed

    private void btnGenSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenSqlActionPerformed
        generateSql();
    }//GEN-LAST:event_btnGenSqlActionPerformed

    private void cmbDestTableNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDestTableNameItemStateChanged
        fillFormWithExistMapper(evt);
    }//GEN-LAST:event_cmbDestTableNameItemStateChanged

    private void btnGenAllSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenAllSqlActionPerformed
        generateAllSql();
    }//GEN-LAST:event_btnGenAllSqlActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFillTable;
    private javax.swing.JButton btnGenAllSql;
    private javax.swing.JButton btnGenSql;
    private javax.swing.JButton btnSaveMapper;
    private javax.swing.JCheckBox chkIsGenerateCommitSql;
    private javax.swing.JCheckBox chkIsGenerateDeleteSql;
    private javax.swing.JComboBox cmbDestTableName;
    private javax.swing.JComboBox cmbSrcTableName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable mapperTable;
    private javax.swing.JTextArea txtAttachedSql;
    private javax.swing.JTextField txtDestDbLink;
    private javax.swing.JTextArea txtSrcSql;
    // End of variables declaration//GEN-END:variables

    private void init() {

        destDataMetaUtils = new DataMetaUtils(AppConfig.getDSConfig(AppConfig.DEST_DS));
        srcDataMetaUtils = new DataMetaUtils(AppConfig.getDSConfig(AppConfig.SRC_DS));
        mapperStore = new MapperStore(AppConfig.getWorkspace() + MapperStore.MAPPER_FOLDER);
        mapperStore.load();
    }

    private void initAfter() {
        mapper = new TableMapper();
        tableModel = new ColumnMapperTableModel(mapper);
        mapperTable.setModel(tableModel);
        final TableColumn tblColumn = mapperTable.getColumnModel().getColumn(2);

        srcComboBox = new JComboBox();
        srcComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                updateSrcComment(e.getItem().toString(), e.getStateChange() == ItemEvent.SELECTED);
            }
        });
        tblColumn.setCellEditor(new DefaultCellEditor(srcComboBox));

        //init dest table combo box
        fillComboBox(cmbDestTableName, destDataMetaUtils.getTableNameList(), true);

        //init src table combo box
        fillComboBox(cmbSrcTableName, srcDataMetaUtils.getTableNameList(), true);
    }

    private void updateSrcComment(String colName, boolean selected) {
        if (this.srcColumnMappers == null || this.srcColumnMappers.isEmpty()) {
            return;
        }
        int row = this.mapperTable.getEditingRow();
        for (ColumnMapper map : this.srcColumnMappers) {
            if (map.getDestName().equalsIgnoreCase(colName)) {
                if (selected) {
                    this.mapper.updateSrcComment(row, colName, map.getDestComment(), map.getDestType());
                } else {
                    this.mapper.updateSrcComment(row, colName, "", "");
                }
                break;
            }

        }

    }

    private void saveMapepr() {
        saveControlValueToMapper();
        TableMapper newMapper = AppUtils.deepClone(this.mapper);
        mapperStore.saveMapper(newMapper);
    }

    private void fillSrcComboBox() {
        if (mapper.getSrcTableName() != null && mapper.getSrcTableName().length() > 0) {
            srcColumnMappers = srcDataMetaUtils.getColumnMapperListByTable(mapper.getSrcTableName());
        } else {
            srcColumnMappers = srcDataMetaUtils.getColumnMapperListBySql(mapper.getSrcSql());
        }
        srcComboBox.removeAllItems();
        srcComboBox.addItem("");
        for (ColumnMapper srcMapper : srcColumnMappers) {
            srcComboBox.addItem(srcMapper.getDestName());
        }
        this.tableModel.updateSrcColumnMapper(srcColumnMappers);
    }

    private void saveControlValueToMapper() {
        mapper.setDestTableName(cmbDestTableName.getSelectedItem().toString().trim().toUpperCase());
        mapper.setSrcTableName(cmbSrcTableName.getSelectedItem().toString().trim().toUpperCase());
        mapper.setSrcSql(txtSrcSql.getText().trim());
        mapper.setAttachedSql(txtAttachedSql.getText().trim());
        mapper.setDestDbLink(txtDestDbLink.getText().trim());
        mapper.setIsGenerateCommitSql(chkIsGenerateCommitSql.getModel().isSelected());
        mapper.setIsGenerateDeleteSql(chkIsGenerateDeleteSql.getModel().isSelected());
    }

    private void fillComboBox(JComboBox cmb, List<String> list, boolean appendBlank) {
        cmb.removeAllItems();
        if (appendBlank) {
            cmb.addItem("");
        }
        for (String v : list) {
            cmb.addItem(v);
        }
    }

    private void fillFormWithExistMapper(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String destTableName = evt.getItem().toString().trim();
            if (destTableName.length() > 0) {
                if (this.mapper != null && destTableName.equalsIgnoreCase(this.mapper.getDestTableName()) == false) {
                    TableMapper existMapper = mapperStore.getMapper(destTableName);
                    if (existMapper != null) {
                        TableMapper deepCloneMapper = AppUtils.deepClone(existMapper);
                        this.mapper = deepCloneMapper;
                        this.cmbSrcTableName.setSelectedItem(this.mapper.getSrcTableName());
                        this.txtSrcSql.setText(this.mapper.getSrcSql());
                        this.txtAttachedSql.setText(this.mapper.getAttachedSql());
                        this.txtDestDbLink.setText(this.mapper.getDestDbLink());
                        this.chkIsGenerateCommitSql.getModel().setSelected(this.mapper.isIsGenerateCommitSql());
                        this.chkIsGenerateDeleteSql.getModel().setSelected(this.mapper.isIsGenerateDeleteSql());
                        fillSrcComboBox();
                        this.tableModel.update(deepCloneMapper);
                    } else {
                        this.cmbSrcTableName.setSelectedItem("");
                        this.txtSrcSql.setText("");
                        this.txtAttachedSql.setText("");
                        this.txtDestDbLink.setText("");
                        this.chkIsGenerateCommitSql.getModel().setSelected(false);
                        this.chkIsGenerateDeleteSql.getModel().setSelected(false);
                        this.mapper = new TableMapper();
                        this.tableModel.update(mapper);
                    }
                }
            }
        }
    }

    private void generateSql() {
        this.btnGenSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.mapper.generateSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.SRC_DS);
        form.setVisible(true);
    }

    private void fillMapperTable() throws HeadlessException {
        if (cmbDestTableName.getSelectedItem().toString().trim().isEmpty()
                || (cmbSrcTableName.getSelectedItem().toString().trim().isEmpty() && txtSrcSql.getText().trim().isEmpty())) {
            JOptionPane.showMessageDialog(this, "Required Fileds: Dest Table Name and (Src Table table or Sql)", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        saveControlValueToMapper();
        List<ColumnMapper> destColumnMappers = destDataMetaUtils.getColumnMapperListByTable(mapper.getDestTableName());
        fillSrcComboBox();
        this.tableModel.mergeColumnMapper(destColumnMappers);

    }

    private void generateAllSql() {
        this.btnGenSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.mapperStore.genAllInsertSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.SRC_DS);
        form.setVisible(true);
    }
}
