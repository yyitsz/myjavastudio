/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.sqltool.ui.form;

import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import tools.sqltool.audit.AuditTableStore;
import tools.sqltool.cfg.AppConfig;
import tools.sqltool.ui.model.StringListModel;
import tools.sqltool.ui.model.ValueName;
import tools.sqltool.utils.AppUtils;
import tools.sqltool.utils.DataMetaUtils;

/**
 *
 * @author yy
 */
public class AuditFunctionForm extends javax.swing.JInternalFrame {

    private DataMetaUtils utils;
    private List<String> destTableNameList = new ArrayList<String>();
    private AuditTableStore store = new AuditTableStore(AppConfig.getWorkspace() + AuditTableStore.AUDIT_FOLDER);

    /**
     * Creates new form ExportSqlForm
     */
    public AuditFunctionForm() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstDestTableName = new javax.swing.JList();
        btnExportAsInsertSql = new javax.swing.JButton();
        cmbDs = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSrcTableName = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Export Sql");

        jScrollPane1.setViewportView(lstDestTableName);

        btnExportAsInsertSql.setText("Gen Table & Trigger Sql");
        btnExportAsInsertSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportAsInsertSqlActionPerformed(evt);
            }
        });

        cmbDs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDsItemStateChanged(evt);
            }
        });

        jScrollPane2.setViewportView(lstSrcTableName);

        btnAdd.setText(">");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("<");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(336, 336, 336)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(btnAdd)
                    .add(btnRemove))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnExportAsInsertSql)
                    .add(cmbDs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 343, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 42, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 319, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(437, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(cmbDs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(btnExportAsInsertSql)
                .add(18, 18, 18)
                .add(jScrollPane1)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(164, 164, 164)
                .add(btnAdd)
                .add(26, 26, 26)
                .add(btnRemove)
                .addContainerGap(279, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportAsInsertSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportAsInsertSqlActionPerformed
        exportToInsertSql();
    }//GEN-LAST:event_btnExportAsInsertSqlActionPerformed

    private void cmbDsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDsItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fillTableNameToList(((ValueName) evt.getItem()).getValue());
        }
    }//GEN-LAST:event_cmbDsItemStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addToDest();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeFromDest();
    }//GEN-LAST:event_btnRemoveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExportAsInsertSql;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cmbDs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstDestTableName;
    private javax.swing.JList lstSrcTableName;
    // End of variables declaration//GEN-END:variables

    private void exportToInsertSql() {

        if (destTableNameList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No table is selected.");
            return;
        }
        final StringBuilder sb = new StringBuilder();
        for (final String tableName : destTableNameList) {
            utils.executeQuerySql("SELECT * FROM " + tableName + " WHERE 1=2", new DataMetaUtils.QueryAction<Object>() {
                @Override
                public Object callback(ResultSet rs) throws SQLException {
                    StringBuilder tableTriggerSb = new StringBuilder();
                    ResultSetMetaData metaData = rs.getMetaData();
                    String auditTableName = tableName + "_AL";
                    tableTriggerSb.append("CREATE TABLE ").append(auditTableName).append(" (\n");

                    for (int i = 0; i < metaData.getColumnCount(); i++) {
                        tableTriggerSb.append("    ");
                        tableTriggerSb.append(metaData.getColumnName(i + 1));
                        String typeName = metaData.getColumnTypeName(i + 1);
                        tableTriggerSb.append(" ")
                                .append(typeName);
                        if (metaData.getPrecision(i + 1) > 0) {
                            tableTriggerSb.append("(")
                                    .append(metaData.getPrecision(i + 1));
                            if (metaData.getScale(i + 1) > 0) {
                                tableTriggerSb.append(",")
                                        .append(metaData.getScale(i + 1));
                            }
                            tableTriggerSb.append(")");
                        }

                        tableTriggerSb.append(",\n");

                    }
                    tableTriggerSb.append("    ACT_TYPE CHAR(1),\n")
                            .append("    ACT_BY VARCHAR2(50),\n")
                            .append("    ACT_TIME DATE\n");
                    tableTriggerSb.append(");\n");


                    //create trigger
                    StringBuilder newInsert = new StringBuilder();
                    StringBuilder delInsert = new StringBuilder();
                    newInsert.append("INSERT INTO ").append(auditTableName).append("(");
                    delInsert.append("INSERT INTO ").append(auditTableName).append("(");

                    for (int i = 0; i < metaData.getColumnCount(); i++) {

                        newInsert.append(metaData.getColumnName(i + 1));
                        newInsert.append(",");
                        delInsert.append(metaData.getColumnName(i + 1));
                        delInsert.append(",");
                    }
                    newInsert.append("ACT_TYPE,")
                            .append("ACT_BY,")
                            .append("ACT_TIME) VALUES(");
                    delInsert.append("ACT_TYPE,")
                            .append("ACT_BY,")
                            .append("ACT_TIME) VALUES(");

                    for (int i = 0; i < metaData.getColumnCount(); i++) {

                        newInsert.append(":NEWROW.").append(metaData.getColumnName(i + 1));
                        newInsert.append(",");
                        delInsert.append(":OLDROW.").append(metaData.getColumnName(i + 1));
                        delInsert.append(",");
                    }
                    newInsert.append("v_actType,")
                            .append(":NEWROW.UPDATED_BY,")
                            .append("sysdate);\n");
                    delInsert.append("'D',")
                            .append("USER,")
                            .append("sysdate);\n");

                    tableTriggerSb.append("CREATE OR REPLACE TRIGGER ")
                            .append("TR_AL_")
                            .append(tableName)
                            .append(" \n")
                            .append("AFTER INSERT OR DELETE OR UPDATE ON ")
                            .append(tableName)
                            .append(" \n")
                            .append("REFERENCING OLD AS \"OLDROW\" NEW AS \"NEWROW\" \n"
                            + "FOR EACH ROW \n"
                            + "ENABLE\n")
                            .append("DECLARE\n")
                            .append("v_actType char(1);\n")
                            .append("BEGIN\n")
                            .append("IF INSERTING OR UPDATING THEN \n"
                            + "BEGIN \n"
                            + "IF INSERTING THEN \n v_actType := 'I'; \nELSE\n v_actType := 'U';\n END IF;\n");
                    tableTriggerSb.append(newInsert.toString());
                    tableTriggerSb.append("END;\n"
                            + " ELSIF DELETING THEN \n"
                            + " BEGIN \n");

                    tableTriggerSb.append(delInsert.toString());
                    tableTriggerSb.append("END;\n"
                            + "END IF;\n"
                            + "END;\n/\n");
                    sb.append(tableTriggerSb.toString());

                    return null;
                }
            });
        }

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sb.toString());
        form.setTestDsKey(((ValueName) cmbDs.getSelectedItem()).getValue());
        form.setVisible(true);

    }

//    CREATE OR REPLACE TRIGGER TR_L_ID_TYPE
// AFTER INSERT OR DELETE OR UPDATE ON L_ID_TYPE
//REFERENCING OLD AS OLD NEW AS NEW
//FOR EACH ROW
// ENABLE
//DECLARE
//	v_actType char(1);
//BEGIN
//  IF INSERTING OR UPDATING THEN
//  BEGIN
//    IF INSERTING THEN
//      v_actType := 'I';
//    ELSE 
//      v_actType := 'U';
//    END IF;
//
//	INSERT INTO L_ID_TYPE_AL( CODE,
//    VAL,
//    SEQ,
//    IS_ACTIVE,
//    REMARK,
//    CREATED_BY,
//    CREATE_TIME,
//    UPDATED_BY,
//    UPDATE_TIME,
//    REC_VER,
//    TAG_SEQ,
//    ACT_TYPE,
//    ACT_BY,
//    ACT_TIME) 
//    VALUES(
//	:NEWROW.CODE,
//    :NEWROW.VAL,
//    :NEWROW.SEQ,
//    :NEWROW.IS_ACTIVE,
//    :NEWROW.REMARK,
//    :NEWROW.CREATED_BY,
//    :NEWROW.CREATE_TIME,
//    :NEWROW.UPDATED_BY,
//    :NEWROW.UPDATE_TIME,
//    :NEWROW.REC_VER,
//    :NEWROW.TAG_SEQ,
//	v_actType,
//    :NEWROW.UPDATED_BY,
//    sysdate
//	);
//END;
//  ELSIF DELETING THEN
//BEGIN
//INSERT INTO L_ID_TYPE_AL( CODE,
//    VAL,
//    SEQ,
//    IS_ACTIVE,
//    REMARK,
//    CREATED_BY,
//    CREATE_TIME,
//    UPDATED_BY,
//    UPDATE_TIME,
//    REC_VER,
//    TAG_SEQ,
//    ACT_TYPE,
//    ACT_BY,
//    ACT_TIME) 
//    VALUES(
//	:OLDROW.CODE,
//    :OLDROW.VAL,
//    :OLDROW.SEQ,
//    :OLDROW.IS_ACTIVE,
//    :OLDROW.REMARK,
//    :OLDROW.CREATED_BY,
//    :OLDROW.CREATE_TIME,
//    :OLDROW.UPDATED_BY,
//    :OLDROW.UPDATE_TIME,
//    :OLDROW.REC_VER,
//    :OLDROW.TAG_SEQ,
//	'D',
//    USER,
//    sysdate
//	);
//END;
//  END IF;
//END;
    private void fillTableNameToList(String dsName) {
        if (dsName.length() > 0) {
            utils = new DataMetaUtils(AppConfig.getDSConfig(dsName));
            final List<String> tableNameList = utils.getTableNameList();
            lstSrcTableName.setModel(new StringListModel(tableNameList));
        } else {
            this.lstSrcTableName.setModel(new StringListModel());
        }

    }

    private void init() {
        this.cmbDs.setModel(new DefaultComboBoxModel(new ValueName[]{
                    new ValueName("", ""),
                    new ValueName("Destination Data Source", "destds")}));

        this.cmbDs.getModel().setSelectedItem(this.cmbDs.getModel().getElementAt(0));

        destTableNameList = store.load();

        lstDestTableName.setModel(new StringListModel(destTableNameList));
    }

    private void addToDest() {
        Object[] selectedValues = this.lstSrcTableName.getSelectedValues();
        if (selectedValues.length > 0) {
            for (Object obj : selectedValues) {
                String name = (String) obj;
                if (destTableNameList.contains(name) == false) {
                    destTableNameList.add(name);
                }
            }
            StringListModel model = (StringListModel) this.lstDestTableName.getModel();
            model.setList(destTableNameList);
            store.save(destTableNameList);
        }
    }

    private void removeFromDest() {
        Object[] selectedValues = this.lstDestTableName.getSelectedValues();
        if (selectedValues.length > 0) {
            for (Object obj : selectedValues) {
                String name = (String) obj;
                destTableNameList.remove(name);
            }
            StringListModel model = (StringListModel) this.lstDestTableName.getModel();
            model.setList(destTableNameList);
            store.save(destTableNameList);
        }
    }
}
