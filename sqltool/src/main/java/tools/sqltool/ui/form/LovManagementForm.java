/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.sqltool.ui.form;

import com.sun.org.apache.bcel.internal.generic.StoreInstruction;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import tools.sqltool.cfg.AppConfig;
import tools.sqltool.lov.LovRow;
import tools.sqltool.lov.LovStore;
import tools.sqltool.lov.LovTable;
import tools.sqltool.ui.model.LovTableModel;
import tools.sqltool.utils.AppUtils;
import tools.sqltool.utils.DataMetaUtils;

/**
 *
 * @author yy
 */
public class LovManagementForm extends javax.swing.JInternalFrame {

    private LovTableModel tableModel;
    //private LovTable mapper;
    private DataMetaUtils destDataMetaUtils;
    private LovStore lovStore;

    /**
     * Creates new form MapperForm
     */
    public LovManagementForm() {
        init();
        initComponents();
        initAfter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mapperTable = new javax.swing.JTable();
        btnSaveLov = new javax.swing.JButton();
        btnGenMergeIntoSql = new javax.swing.JButton();
        cmbLovTableName = new javax.swing.JComboBox();
        btnAddRow = new javax.swing.JButton();
        btnGenInsertSql = new javax.swing.JButton();
        btnGenCaseSql = new javax.swing.JButton();
        btnDeleteLov = new javax.swing.JButton();
        btnGenAllMergeIntoSql = new javax.swing.JButton();
        btnGenAllInsertSql = new javax.swing.JButton();
        chkGenDeleteSql = new javax.swing.JCheckBox();
        btnFillDataFromDb = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        chkGenEnum = new javax.swing.JCheckBox();
        txtClassName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnGenJavaClass = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("LOV Management");

        jLabel1.setText("Lov Table");

        mapperTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(mapperTable);

        btnSaveLov.setText("Save Lov");
        btnSaveLov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveLovActionPerformed(evt);
            }
        });

        btnGenMergeIntoSql.setText("Gen Merge Into Sql");
        btnGenMergeIntoSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenMergeIntoSqlActionPerformed(evt);
            }
        });

        cmbLovTableName.setEditable(true);
        cmbLovTableName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbLovTableNameItemStateChanged(evt);
            }
        });

        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnGenInsertSql.setText("Gen Insert Sql");
        btnGenInsertSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenInsertSqlActionPerformed(evt);
            }
        });

        btnGenCaseSql.setText("Gen Case Sql");
        btnGenCaseSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenCaseSqlActionPerformed(evt);
            }
        });

        btnDeleteLov.setText("Delete from Store");
        btnDeleteLov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLovActionPerformed(evt);
            }
        });

        btnGenAllMergeIntoSql.setText("Gen All Merge Into Sql");
        btnGenAllMergeIntoSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenAllMergeIntoSqlActionPerformed(evt);
            }
        });

        btnGenAllInsertSql.setText("Gen All Insert Sql");
        btnGenAllInsertSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenAllInsertSqlActionPerformed(evt);
            }
        });

        chkGenDeleteSql.setText("Is Gen Delete Sql");

        btnFillDataFromDb.setText("Fill Data From DB");
        btnFillDataFromDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillDataFromDbActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Row");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        chkGenEnum.setText("Is Gen Enum");

        jLabel2.setText("Full Class Name");

        btnGenJavaClass.setText("Gen Java Class");
        btnGenJavaClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenJavaClassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(layout.createSequentialGroup()
                                    .add(jLabel1)
                                    .add(32, 32, 32)
                                    .add(cmbLovTableName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createSequentialGroup()
                                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(btnDelete)
                                        .add(txtClassName))))
                            .add(layout.createSequentialGroup()
                                .add(chkGenDeleteSql)
                                .add(38, 38, 38)
                                .add(chkGenEnum))))
                    .add(btnAddRow))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(btnGenAllMergeIntoSql)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnGenAllInsertSql)
                        .add(18, 18, 18)
                        .add(btnGenJavaClass))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(btnGenMergeIntoSql, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(btnGenCaseSql)
                                .add(33, 33, 33))
                            .add(layout.createSequentialGroup()
                                .add(btnSaveLov, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnFillDataFromDb)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnGenInsertSql)
                            .add(btnDeleteLov))))
                .addContainerGap(107, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(cmbLovTableName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(chkGenDeleteSql)
                            .add(chkGenEnum))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(txtClassName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnSaveLov)
                            .add(btnFillDataFromDb)
                            .add(btnDeleteLov))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnGenMergeIntoSql)
                            .add(btnGenCaseSql)
                            .add(btnGenInsertSql))
                        .add(0, 0, Short.MAX_VALUE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnAddRow)
                        .add(btnDelete))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnGenAllInsertSql)
                        .add(btnGenAllMergeIntoSql)
                        .add(btnGenJavaClass)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 437, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveLovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveLovActionPerformed
        saveMapepr();
    }//GEN-LAST:event_btnSaveLovActionPerformed

    private void btnGenMergeIntoSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenMergeIntoSqlActionPerformed
        generateMergeIntoSql();
    }//GEN-LAST:event_btnGenMergeIntoSqlActionPerformed

    private void cmbLovTableNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbLovTableNameItemStateChanged
        fillFormWithExistMapper(evt);
    }//GEN-LAST:event_cmbLovTableNameItemStateChanged

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        this.tableModel.addLovRow();
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void btnGenCaseSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenCaseSqlActionPerformed
        generateCaseSql();
    }//GEN-LAST:event_btnGenCaseSqlActionPerformed

    private void btnGenInsertSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenInsertSqlActionPerformed
        generateInsertSql();
    }//GEN-LAST:event_btnGenInsertSqlActionPerformed

    private void btnDeleteLovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteLovActionPerformed
        deleteLovSettingFromStore();
    }//GEN-LAST:event_btnDeleteLovActionPerformed

    private void btnGenAllMergeIntoSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenAllMergeIntoSqlActionPerformed
        generateAllMergeIntoSql();
    }//GEN-LAST:event_btnGenAllMergeIntoSqlActionPerformed

    private void btnGenAllInsertSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenAllInsertSqlActionPerformed
        generateAllInsertSql();
    }//GEN-LAST:event_btnGenAllInsertSqlActionPerformed

    private void btnFillDataFromDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillDataFromDbActionPerformed
        fillDataFromDb();
    }//GEN-LAST:event_btnFillDataFromDbActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteCurrentLovRow();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnGenJavaClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenJavaClassActionPerformed
        genJavaClass();
    }//GEN-LAST:event_btnGenJavaClassActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteLov;
    private javax.swing.JButton btnFillDataFromDb;
    private javax.swing.JButton btnGenAllInsertSql;
    private javax.swing.JButton btnGenAllMergeIntoSql;
    private javax.swing.JButton btnGenCaseSql;
    private javax.swing.JButton btnGenInsertSql;
    private javax.swing.JButton btnGenJavaClass;
    private javax.swing.JButton btnGenMergeIntoSql;
    private javax.swing.JButton btnSaveLov;
    private javax.swing.JCheckBox chkGenDeleteSql;
    private javax.swing.JCheckBox chkGenEnum;
    private javax.swing.JComboBox cmbLovTableName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mapperTable;
    private javax.swing.JTextField txtClassName;
    // End of variables declaration//GEN-END:variables

    private void init() {

        destDataMetaUtils = new DataMetaUtils(AppConfig.getDSConfig(AppConfig.DEST_DS));
        lovStore = new LovStore(AppConfig.getWorkspace() + LovStore.LOV_FOLDER);
        lovStore.load();
    }

    private void initAfter() {
        // mapper = new LovTable();
        tableModel = new LovTableModel(new LovTable());
        mapperTable.setModel(tableModel);


        //init dest table combo box
        try {
            fillComboBox(cmbLovTableName, destDataMetaUtils.getLovTableNameList(), true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Can not connect to db: " + ex.getMessage());
        }
    }

    private void saveMapepr() {
        saveControlValueToMapper();
        LovTable newMapper = AppUtils.deepClone(this.tableModel.getLovTable());
        lovStore.saveLovTable(newMapper);
    }

    private void saveControlValueToMapper() {
        LovTable lovTable = this.tableModel.getLovTable();
        lovTable.setTableName(cmbLovTableName.getSelectedItem().toString().trim().toUpperCase());
        lovTable.setGenDeleteSql(chkGenDeleteSql.getModel().isSelected());
        lovTable.setFullClassName(this.txtClassName.getText());
        lovTable.setGenEnumClass((chkGenEnum.getModel().isSelected()));
    }

    private void fillComboBox(JComboBox cmb, List<String> list, boolean appendBlank) {
        cmb.removeAllItems();
        if (appendBlank) {
            cmb.addItem("");
        }
        for (String v : list) {
            cmb.addItem(v);
        }
    }

    private void fillFormWithExistMapper(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String destTableName = evt.getItem().toString().trim();
            if (destTableName.length() > 0) {
                if (destTableName.equalsIgnoreCase(this.tableModel.getLovTable().getTableName()) == false) {
                    LovTable existMapper = lovStore.getLovTable(destTableName);
                    if (existMapper != null) {
                        LovTable deepCloneMapper = AppUtils.deepClone(existMapper);
                        chkGenDeleteSql.getModel().setSelected(deepCloneMapper.isGenDeleteSql());
                        chkGenEnum.getModel().setSelected(deepCloneMapper.isGenEnumClass());
                        txtClassName.setText(deepCloneMapper.getFullClassName());
                        this.tableModel.setLovTable(deepCloneMapper);
                        return;
                    }
                }
            }
            LovTable lovTable = new LovTable();
            lovTable.setTableName(destTableName);
            chkGenDeleteSql.getModel().setSelected(false);
            chkGenEnum.getModel().setSelected(false);
            this.tableModel.setLovTable(lovTable);
        } else {
            String destTableName = evt.getItem().toString().trim();
            LovTable lovTable = this.tableModel.getLovTable();
            if (lovTable.getRows().size() > 0) {
                int showConfirmDialog = JOptionPane.showOptionDialog(this, "Save current data?",
                        "Prompt", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                if (showConfirmDialog == JOptionPane.YES_OPTION) {
                    lovTable.setTableName(destTableName);
                    lovTable.setGenDeleteSql(chkGenDeleteSql.getModel().isSelected());
                    lovTable.setGenEnumClass(chkGenEnum.getModel().isSelected());
                    lovTable.setFullClassName(this.txtClassName.getText());
                    lovStore.saveLovTable(this.tableModel.getLovTable());
                }
            }


        }
    }

    private void generateMergeIntoSql() {
        this.btnGenMergeIntoSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.tableModel.getLovTable().genMergeIntoSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.DEST_DS);
        form.setVisible(true);
    }

    private void generateInsertSql() {
        this.btnGenMergeIntoSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.tableModel.getLovTable().genInsertSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.DEST_DS);
        form.setVisible(true);
    }

    private void generateAllInsertSql() {
        this.btnGenMergeIntoSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.lovStore.genAllInsertSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.DEST_DS);
        form.setVisible(true);
    }

    private void generateAllMergeIntoSql() {
        this.btnGenMergeIntoSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.lovStore.genAllMergeIntoSql();

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.DEST_DS);
        form.setVisible(true);
    }

    private void generateCaseSql() {
        this.btnGenMergeIntoSql.requestFocusInWindow();
        saveControlValueToMapper();
        String sql = this.tableModel.getLovTable().genCaseSql("X", true);

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sql);
        form.setTestDsKey(AppConfig.DEST_DS);
        form.setVisible(true);
    }

    private void deleteLovSettingFromStore() {
        int showConfirmDialog = JOptionPane.showOptionDialog(this, "Are you sure delete this lov table?",
                "Prompt", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (showConfirmDialog == JOptionPane.YES_OPTION) {
            String tableName = cmbLovTableName.getSelectedItem().toString();
            if (tableName.length() > 0) {
                lovStore.deleteLovTable(tableName);
            }

            LovTable lovTable = new LovTable();
            lovTable.setTableName(tableName);
            this.tableModel.setLovTable(lovTable);
        }


    }

    private void fillDataFromDb() {

        String tableName = cmbLovTableName.getSelectedItem().toString();
        if (tableName.length() > 0) {
            int showConfirmDialog = JOptionPane.showOptionDialog(this, "The data will be replaced by DB, are you sure?",
                    "Prompt", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (showConfirmDialog == JOptionPane.YES_OPTION) {

                LovTable lovTable = new LovTable();
                lovTable.setTableName(tableName);
                String sql = "SELECT * FROM " + tableName;
                List<LovRow> returnedRows = destDataMetaUtils.executeQuerySql(sql, new DataMetaUtils.QueryAction<List<LovRow>>() {
                    @Override
                    public List<LovRow> callback(ResultSet rs) throws SQLException {
                        List<LovRow> result = new ArrayList<LovRow>();
                        while (rs.next()) {
                            LovRow row = new LovRow();
                            result.add(row);
                            row.setCode(rs.getString("CODE"));
                            row.setName(rs.getString("VAL"));
                            row.setSeq(rs.getString("SEQ"));
                            row.setRemark(rs.getString("REMARK"));
                        }
                        return result;
                    }
                });
                lovTable.getRows().addAll(returnedRows);
                this.tableModel.setLovTable(lovTable);
            }


        }
    }

    private void deleteCurrentLovRow() {
        int rowIndex = mapperTable.getSelectedRow();
        if (rowIndex >= 0 && rowIndex < mapperTable.getRowCount()) {
            int showConfirmDialog = JOptionPane.showOptionDialog(this, "The data will be deleted, are you sure?",
                    "Prompt", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (showConfirmDialog == JOptionPane.YES_OPTION) {
                int modelIndex = mapperTable.convertRowIndexToModel(rowIndex);
                this.tableModel.deleteLovRow(modelIndex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No data or no selected row.");
        }
    }

    private void genJavaClass() {
        String folder = AppConfig.getWorkspace() + "java";
        this.lovStore.genJavaClass(folder);
        JOptionPane.showMessageDialog(this, "Generated Java Class Sucessful!");
    }
}
