/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.sqltool.ui.form;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.lang.StringUtils;
import tools.sqltool.cfg.AppConfig;
import tools.sqltool.utils.AppUtils;
import tools.sqltool.utils.DataMetaUtils;
import tools.sqltool.utils.DataSourceUtils;

/**
 *
 * @author yyi
 */
public class SqlResultForm extends javax.swing.JDialog {

    private static String previousPath;
    private String testDsKey;

    /**
     * Creates new form SqlResultForm
     */
    public SqlResultForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public String getSqlResult() {
        return this.txtSqlResult.getText();
    }

    public void setSqlResult(String sqlResult) {

        this.txtSqlResult.setText(sqlResult);
    }

    public String getTestDsKey() {
        return testDsKey;
    }

    public void setTestDsKey(String testDsKey) {
        this.testDsKey = testDsKey;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtSqlResult = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnTest = new javax.swing.JButton();
        btnExecute = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtSqlResult.setColumns(20);
        txtSqlResult.setRows(5);
        jScrollPane1.setViewportView(txtSqlResult);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnTest.setText("Test");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        btnExecute.setText("Execute");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTest)
                .addGap(41, 41, 41)
                .addComponent(btnExecute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnClose)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnClose)
                    .addComponent(btnTest)
                    .addComponent(btnExecute))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (previousPath != null) {
            fc.setCurrentDirectory(new File(previousPath));
        }
        int result = fc.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                previousPath = file.getCanonicalPath();
            } catch (IOException ex) {
            }
            OutputStreamWriter writer = null;
            try {
                writer = new OutputStreamWriter(new FileOutputStream(file, false), "UTF-8");
                writer.write(this.getSqlResult());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Failed to save sql result. Because : " + ex.getMessage());
            } finally {
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (IOException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        executeSql(true);
    }//GEN-LAST:event_btnTestActionPerformed

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        executeSql(false);
    }//GEN-LAST:event_btnExecuteActionPerformed

    private void executeSql(boolean isRollback) {
        //DataSource ds = AppUtils.getBean("destDataSource", DataSource.class);
        DataSource ds = DataSourceUtils.createDataSource(AppConfig.getDSConfig(testDsKey));
        Connection connection = null;

        StringBuilder sb = new StringBuilder();
        try {
            connection = ds.getConnection();
            connection.setAutoCommit(false);
            String[] splittedSql = this.getSqlResult().split(";");
            for (String sql : splittedSql) {
                sql = StringUtils.trim(sql);
                if (sql != null && sql.length() > 0) {
                    PreparedStatement statement = null;
                    try {
                        statement = connection.prepareStatement(sql);
                        int affectNum = statement.executeUpdate();
                        sb.append("result: ").append(affectNum).append("\n");
                    } finally {
                        DataMetaUtils.closeStatement(statement);
                    }
                }
            }
            if (isRollback == false) {
                connection.commit();
            }
            JOptionPane.showMessageDialog(this, sb.toString());
        } catch (SQLException ex) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException ex2) {
            }
            JOptionPane.showMessageDialog(this, ex.toString());
        } finally {
            try {
                if (isRollback && connection != null) {
                    connection.rollback();
                }
            } catch (SQLException ex) {
            }
            DataMetaUtils.closeConnection(connection);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtSqlResult;
    // End of variables declaration//GEN-END:variables
}
