/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.sqltool.ui.form;

import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import tools.sqltool.cfg.AppConfig;
import tools.sqltool.ui.model.StringListModel;
import tools.sqltool.ui.model.ValueName;
import tools.sqltool.utils.AppUtils;
import tools.sqltool.utils.DataMetaUtils;

/**
 *
 * @author yy
 */
public class ExportSqlForm extends javax.swing.JInternalFrame {

    DataMetaUtils utils;

    /**
     * Creates new form ExportSqlForm
     */
    public ExportSqlForm() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstTableName = new javax.swing.JList();
        btnExportAsInsertSql = new javax.swing.JButton();
        cmbDs = new javax.swing.JComboBox();
        chkIsGenDeleteSql = new javax.swing.JCheckBox();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Export Sql");

        jScrollPane1.setViewportView(lstTableName);

        btnExportAsInsertSql.setText("Export As Insert Sql");
        btnExportAsInsertSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportAsInsertSqlActionPerformed(evt);
            }
        });

        cmbDs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDsItemStateChanged(evt);
            }
        });

        chkIsGenDeleteSql.setText("Is Gen Delete Sql");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 355, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(43, 43, 43)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnExportAsInsertSql)
                            .add(cmbDs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(54, 54, 54)
                        .add(chkIsGenDeleteSql)))
                .add(0, 77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(cmbDs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(btnExportAsInsertSql)
                .add(18, 18, 18)
                .add(chkIsGenDeleteSql)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportAsInsertSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportAsInsertSqlActionPerformed
        exportToInsertSql();
    }//GEN-LAST:event_btnExportAsInsertSqlActionPerformed

    private void cmbDsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDsItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fillTableNameToList(((ValueName) evt.getItem()).getValue());
        }
    }//GEN-LAST:event_cmbDsItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportAsInsertSql;
    private javax.swing.JCheckBox chkIsGenDeleteSql;
    private javax.swing.JComboBox cmbDs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstTableName;
    // End of variables declaration//GEN-END:variables

    private void exportToInsertSql() {
        Object[] selectedValues = lstTableName.getSelectedValues();
        if (selectedValues.length == 0) {
            JOptionPane.showMessageDialog(this, "No table is selected.");
            return;
        }
        final StringBuilder sb = new StringBuilder();
        for (Object obj : selectedValues) {
            final String tableName = (String) obj;
            if (chkIsGenDeleteSql.getModel().isSelected()) {
                sb.append("DELETE FROM ").append(tableName).append(";\n");
            }
            utils.executeQuerySql("SELECT * FROM " + tableName, new DataMetaUtils.QueryAction<Object>() {
                @Override
                public Object callback(ResultSet rs) throws SQLException {
                    StringBuilder insertSb = new StringBuilder();
                    insertSb.append("INSERT INTO ").append(tableName).append("(");

                    for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
                        insertSb.append(rs.getMetaData().getColumnName(i + 1));
                        if (i < rs.getMetaData().getColumnCount() - 1) {
                            insertSb.append(",");
                        }
                    }
                    insertSb.append(") VALUES (");
                    while (rs.next()) {
                        sb.append(insertSb.toString());
                        for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
                            Object obj = rs.getObject(i + 1);
                            int sqlType = rs.getMetaData().getColumnType(i + 1);
                            if (obj == null) {
                                sb.append("NULL");
                            } else if (sqlType == Types.CHAR
                                    || sqlType == Types.CLOB
                                    || sqlType == Types.LONGNVARCHAR
                                    || sqlType == Types.LONGVARCHAR
                                    || sqlType == Types.VARCHAR
                                    || sqlType == Types.NVARCHAR) {
                                sb.append("'").append(obj.toString()).append("'");
                            } else if (sqlType == Types.DATE || sqlType == Types.TIME || sqlType == Types.TIMESTAMP) {
                                sb.append("TO_DATE('").append(AppUtils.formatDate(obj)).append("', 'yyyy-mm-dd hh24:mi:ss')");
                            } else {
                                sb.append(obj);
                            }
                            if (i < rs.getMetaData().getColumnCount() - 1) {
                                sb.append(",");
                            }
                        }
                        sb.append(");\n");
                    }
                    return null;
                }
            });
        }

        SqlResultForm form = new SqlResultForm(null, true);
        form.setLocationRelativeTo(null);
        form.setSqlResult(sb.toString());
        form.setTestDsKey(((ValueName) cmbDs.getSelectedItem()).getValue());
        form.setVisible(true);

    }

    private void fillTableNameToList(String dsName) {
        if(dsName.length() > 0) {
        utils = new DataMetaUtils(AppConfig.getDSConfig(dsName));
        final List<String> tableNameList = utils.getTableNameList();
        lstTableName.setModel(new StringListModel(tableNameList));
        } else {
            this.lstTableName.setModel(new StringListModel());
        }

    }

    private void init() {
        this.cmbDs.setModel(new DefaultComboBoxModel(new ValueName[]{
                    new ValueName("", ""),
                    new ValueName("Destination Data Source", "destds"),
                    new ValueName("Source Data Source", "srcds")}));

        this.cmbDs.getModel().setSelectedItem(this.cmbDs.getModel().getElementAt(0));
    }
}
