<?xml version="1.0" encoding="UTF-8"?>
<!-- 使用aop/tx命名空间 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 配置事务管理器bean,使用HibernateTransactionManager事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 为事务管理器注入sessionFactory" -->
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- 通过aop定义事务增强切面 --> 
	<aop:config>
		<!-- 使用强大的切点表达式语言轻松定义目标方法 -->
		<aop:pointcut id="serviceMethod"
			expression="execution(* com.tinylight.common.dao.base.IBaseDao.*(..))" />
		<!-- 引用事务增强 -->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>

	<!-- 事务增强 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 属性事务定义 -->
		<tx:attributes>
			<!--OpenSessionInViewFilter在getSession的时候,会把获取回来的session的flush mode 设为FlushMode.NEVER。
			然后把该sessionFactory绑定到TransactionSynchronizationManager，使request的整个过程都使用同一个session，
			在请求过后再接除该sessionFactory的绑定，最后closeSessionIfNecessary根据该session是否已和transaction绑定来决定是否关闭session。
			在这个过程中，若HibernateTemplate 发现自当前session有不是readOnly的transaction，就会获取到FlushMode.AUTO Session，使方法拥有写权限。 
			也即是，如果有不是readOnly的transaction就可以由Flush.NEVER转为Flush.AUTO,拥有insert,update,delete操作权限，如果没有transaction，
			并且没有另外人为地设flush model的话，则doFilter的整个过程都是Flush.NEVER。所以受transaction保护的方法有写权限，没受保护的则没有  -->
			<tx:method name="get*" />
			<tx:method name="save*" />
			<tx:method name="load*" />
			<tx:method name="delete*"/>
		</tx:attributes>
	</tx:advice>
	
</beans>
